name: Build

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  TAG_NAME: latest
  TERM: linux
  TG_TOKEN: ${{secrets.TELEGRAM_TOKEN_BOT_THINGINO}}
  TG_CHANNEL: ${{secrets.TELEGRAM_CHANNEL_THINGINO_BUILD}}
  TG_OPTIONS: -s -o /dev/null -w %{http_code}
  TG_ENABLE: false

jobs:
  build-notify:
    runs-on: ubuntu-latest
    steps:
      - name: Send build alert
        if: env.TG_ENABLE== 'true'
        shell: bash
        run: |
          TG_MSG="u-boot-ingenic build started\nhttps://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\n"
          TG_ICON="\xF0\x9F\x9A\xA6 GitHub Actions"
          TG_HEADER=$(echo -e ${TG_MSG}${TG_ICON})
          HTTP=$(curl ${TG_OPTIONS} -H "Content-Type: multipart/form-data" -X POST https://api.telegram.org/bot${TG_TOKEN}/sendMessage -F chat_id=${TG_CHANNEL} -F text="${TG_HEADER}" -F disable_web_page_preview=true)
          echo Telegram response: ${HTTP}

  build:
    needs: build-notify
    runs-on: ubuntu-latest
    container: 
      image: debian:sid
    strategy:
      fail-fast: false
      matrix:
        u-boot-version:
          - t10n
          - t10n
          - t10l
          - t10n_msc0
          - t20n
          - t20l
          - t20x
          - t20n_msc0
          - t21n
          - t21n_msc0
          - t23n
          - t23n_msc0
          - t30n
          - t30l
          - t30x
          - t30a
          - t30a1
          - t30n_msc0
          - t31n
          - t31l
          - t31lc
          - t31x
          - t31a
          - t31al
          - t31l_msc0
          - t31n_msc0
          - t31x_msc0
          - t31a_msc0
          - t31al_msc0

    steps:
      - name: Setup ccache
        uses: actions/cache@v4
        if: always()
        with:
          path: /tmp/ccache
          key: ${{ runner.os }}-ccache-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-ccache-$-

      - name: Update repo sources
        run: |
          apt-get update

      - name: Install dependencies
        run: |
          apt-get install -y --no-install-recommends --no-install-suggests build-essential gcc-13 gcc-13-mipsel-linux-gnu lzop u-boot-tools git make ca-certificates curl
          CROSS_COMPILE=mipsel-linux-gnu-; VER=${1:-13}; for app in cpp gcc gcc-ar gcc-nm gcc-ranlib gcov gcov-dump gcov-tool lto-dump; do if update-alternatives --query ${CROSS_COMPILE}${app} >/dev/null; then update-alternatives --set ${CROSS_COMPILE}${app} /usr/bin/${CROSS_COMPILE}${app}-${VER}; else update-alternatives --install /usr/bin/${CROSS_COMPILE}${app} ${CROSS_COMPILE}${app} /usr/bin/${CROSS_COMPILE}${app}-${VER} 1; fi; done; echo "Done"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Checkout
        uses: actions/checkout@v4

      - name: u-boot-ingenic Build
        shell: bash
        run: |
          echo "HASH IS"
          git rev-parse --short ${GITHUB_SHA}
          export GIT_HASH=$(git rev-parse --short ${GITHUB_SHA})
          export GIT_BRANCH=${GITHUB_REF_NAME}
          echo "GIT_HASH=${GIT_HASH}" >> ${GITHUB_ENV}
          echo "GIT_BRANCH=${GIT_BRANCH}" >> ${GITHUB_ENV}

          mkdir -p /tmp/ccache
          ln -s /tmp/ccache ${HOME}/.ccache

          cp -f .github/scripts/build.sh build-ci.sh
          VERSION=${{ matrix.u-boot-version }}
          bash build-ci.sh $VERSION debug

          TIME=$(date -d @${SECONDS} +%M:%S)
          echo "TIME=${TIME}" >> ${GITHUB_ENV}

      - name: Check if compiled u-boot exists
        run: |
          FILE=./uboot_build/u-boot-${{ matrix.u-boot-version }}.bin

          if [ ! -f "$FILE" ]; then
              echo "File not found exit"
              exit 1
          fi

          echo "Found file: $FILE"
          echo "UBOOTFW=$FILE" >> $GITHUB_ENV

      - name: Upload ${{ matrix.u-boot-version }}
        if: github.event_name != 'pull_request'
        uses: softprops/action-gh-release@master
        with:
          tag_name: ${{ env.TAG_NAME }}
          files: ${{ env.UBOOTFW }}

      - name: Send build alert
        if: github.event_name != 'pull_request' && env.UBOOTFW && env.TG_ENABLE== 'true'
        shell: bash
        run: |
          echo "GIT_HASH: ${GIT_HASH}"
          echo "GIT_BRANCH: ${GIT_BRANCH}"
          TG_MSG="u-boot-ingenic build finished\nCommit: ${GIT_HASH}\nBranch: ${GIT_BRANCH}\nTag: ${TAG_NAME}\nTime: ${TIME}\n\n"
          TG_ICON="\xE2\x9C\x85 GitHub Actions"
          TG_HEADER=$(echo -e ${TG_MSG}${TG_ICON})
          HTTP=$(curl ${TG_OPTIONS} -H "Content-Type: multipart/form-data" -X POST https://api.telegram.org/bot${TG_TOKEN}/sendMessage -F chat_id=${TG_CHANNEL} -F text="${TG_HEADER}" -F disable_web_page_preview=true)
          echo Telegram response: ${HTTP}

      - name: Send error
        if: github.event_name != 'pull_request' && failure()
        shell: bash
        run: |
          TG_WARN="Error: u-boot-ingenic build failed!\n"
          TG_MSG="Commit: ${GIT_HASH}\nBranch: ${GIT_BRANCH}\nTag: ${TAG_NAME}\nhttps://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\n\n"
          TG_ICON="\xE2\x9A\xA0 GitHub Actions"
          TG_HEADER=$(echo -e ${TG_WARN}${TG_MSG}${TG_ICON})
          HTTP=$(curl ${TG_OPTIONS} -H "Content-Type: multipart/form-data" -X POST https://api.telegram.org/bot${TG_TOKEN}/sendMessage -F chat_id=${TG_CHANNEL} -F text="${TG_HEADER}" -F disable_web_page_preview=true)
          echo Telegram response: ${HTTP}
